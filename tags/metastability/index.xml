<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>metastability on Vahab Jabrayilov's Blog</title><link>https://vjabrayilov.github.io/notes/tags/metastability/</link><description>Recent content in metastability on Vahab Jabrayilov's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 18 Jul 2022 16:42:42 +0400</lastBuildDate><atom:link href="https://vjabrayilov.github.io/notes/tags/metastability/index.xml" rel="self" type="application/rss+xml"/><item><title>Metastable Failures in Distributed Systems</title><link>https://vjabrayilov.github.io/notes/posts/metastablefailuresindistrsys/</link><pubDate>Mon, 18 Jul 2022 16:42:42 +0400</pubDate><guid>https://vjabrayilov.github.io/notes/posts/metastablefailuresindistrsys/</guid><description>Introduction Interestingly, most features improving the efficiency or reliability are the main cause of metastable failures. Trigger causes the open system (with an unctrolled source of load) to enter a bad state persisting even after the removal of the trigger. Failures that are resolved when the trigger is removed are not metastable. Recovery requires a strong corrective push, e.g. rebooting or dramatically reducing the load. Lifecycle of a metastable failure: load rises trigger stable state ------------&amp;gt; vulnerable state --------&amp;gt; metastable state (still healthy) the vulnerable state is not an overloaded state; system can run for a long time here; but can get stuck in metastable state w/o any increase in the load.</description></item></channel></rss>