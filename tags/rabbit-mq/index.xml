<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rabbit-mq on Workflow</title><link>https://vjabrayilov.github.io/notes/tags/rabbit-mq/</link><description>Recent content in rabbit-mq on Workflow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 18 Jul 2022 11:06:00 +0400</lastBuildDate><atom:link href="https://vjabrayilov.github.io/notes/tags/rabbit-mq/index.xml" rel="self" type="application/rss+xml"/><item><title>Kafka vs RabbitMQ</title><link>https://vjabrayilov.github.io/notes/posts/kafkavsrabbit/</link><pubDate>Mon, 18 Jul 2022 11:06:00 +0400</pubDate><guid>https://vjabrayilov.github.io/notes/posts/kafkavsrabbit/</guid><description>RabbitMQ Kafka RabbitMQ Architecture Kafka Architecture Use cases References RabbitMQ supports : AMQP : Advanced Message Queuing Protocol MQTT : MQ Telemetry Protocol STOMP : Streaming Text Oriented Messaging Protocol is known as a hybrid broker uses smart broker/dumb consumer model Kafka provides higher throughput, built-in partitioning, replication, and inherent fault-tolerance There are 2 async messagin patterns :
Message Queue
a creating app sends a msg to queue. When the consuming app is ready, it just connects to the queue and retrieves the msg, removing it from the queue.</description></item></channel></rss>