<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Workflow</title><link>https://vjabrayilov.github.io/notes/posts/</link><description>Recent content in Posts on Workflow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 19 Jul 2022 10:17:24 +0400</lastBuildDate><atom:link href="https://vjabrayilov.github.io/notes/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Stoppable Paxos</title><link>https://vjabrayilov.github.io/notes/posts/stoppablepaxos/</link><pubDate>Tue, 19 Jul 2022 10:17:24 +0400</pubDate><guid>https://vjabrayilov.github.io/notes/posts/stoppablepaxos/</guid><description>Summary Stoppable state machines are used to implement reconfiguration, simply a reconfigurable state machine consists of several stoppable state machines. To switch between the configurations, one is stopped and the other is started.
Traditionally, reconfiguration is done by executing special reconfiguration commands as a consensus instance. However, it prevents the concurrent execution of other commands until the new configuration is selected and ready. The main purpose of the Stoppable Paxos is to address this bottleneck.</description></item><item><title>Metastable Failures in Distributed Systems</title><link>https://vjabrayilov.github.io/notes/posts/metastablefailuresindistrsys/</link><pubDate>Mon, 18 Jul 2022 16:42:42 +0400</pubDate><guid>https://vjabrayilov.github.io/notes/posts/metastablefailuresindistrsys/</guid><description>Introduction Interestingly, most features improving the efficiency or reliability are the main cause of metastable failures. Trigger causes the open system (with an unctrolled source of load) to enter a bad state persisting even after the removal of the trigger. Failures that are resolved when the trigger is removed are not metastable. Recovery requires a strong corrective push, e.g. rebooting or dramatically reducing the load. Lifecycle of a metastable failure: load rises trigger stable state ------------&amp;gt; vulnerable state --------&amp;gt; metastable state (still healthy) the vulnerable state is not an overloaded state; system can run for a long time here; but can get stuck in metastable state w/o any increase in the load.</description></item><item><title>Levels Of Techie Enlightenment</title><link>https://vjabrayilov.github.io/notes/posts/levelsoftechieenlightenment/</link><pubDate>Mon, 18 Jul 2022 16:06:24 +0400</pubDate><guid>https://vjabrayilov.github.io/notes/posts/levelsoftechieenlightenment/</guid><description>3 levels of enlightenment:
Level 0: The Newcomer a ton of materials to master reaction: Overwhelmed problem: lack of breadth Level 1: The Half-Expert weakness finding machines reaction: dismissal and destruction Level 2: Chaotic times &amp;hellip; Level 3: Nirvana people are able to provide and receive criticism without making it personal far more productive References https://hackingdistributed.com/2017/05/04/stages-of-enlightenment/</description></item><item><title>Kafka vs RabbitMQ</title><link>https://vjabrayilov.github.io/notes/posts/kafkavsrabbit/</link><pubDate>Mon, 18 Jul 2022 11:06:00 +0400</pubDate><guid>https://vjabrayilov.github.io/notes/posts/kafkavsrabbit/</guid><description>RabbitMQ Kafka RabbitMQ Architecture Kafka Architecture Use cases References RabbitMQ supports : AMQP : Advanced Message Queuing Protocol MQTT : MQ Telemetry Protocol STOMP : Streaming Text Oriented Messaging Protocol is known as a hybrid broker uses smart broker/dumb consumer model Kafka provides higher throughput, built-in partitioning, replication, and inherent fault-tolerance There are 2 async messagin patterns :
Message Queue
a creating app sends a msg to queue. When the consuming app is ready, it just connects to the queue and retrieves the msg, removing it from the queue.</description></item><item><title>PostToGithub</title><link>https://vjabrayilov.github.io/notes/posts/posttogithub/</link><pubDate>Wed, 13 Jul 2022 17:14:59 +0400</pubDate><guid>https://vjabrayilov.github.io/notes/posts/posttogithub/</guid><description>heading level 1 sample code block : let x = 5 a sample task another sample task but marked A sample table
column 1 column 2 header title</description></item><item><title>First</title><link>https://vjabrayilov.github.io/notes/posts/first/</link><pubDate>Wed, 13 Jul 2022 15:23:19 +0400</pubDate><guid>https://vjabrayilov.github.io/notes/posts/first/</guid><description>First post</description></item><item><title>org-post 1</title><link>https://vjabrayilov.github.io/notes/posts/post1/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0400</pubDate><guid>https://vjabrayilov.github.io/notes/posts/post1/</guid><description>TODO cpp #include&amp;lt;iostream&amp;gt; int main{ std::cout&amp;lt;&amp;lt;&amp;#34;Hello, World!\n&amp;#34;; retirm 0; } java public void main(){ System.out.println(&amp;#34;Hello World&amp;#34;); } heading 2 should be under second header</description></item><item><title>org-post 2</title><link>https://vjabrayilov.github.io/notes/posts/post2/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0400</pubDate><guid>https://vjabrayilov.github.io/notes/posts/post2/</guid><description/></item></channel></rss>